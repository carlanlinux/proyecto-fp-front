[{"/Users/Carlos/WebstormProjects/proyecto-fp/src/index.js":"1","/Users/Carlos/WebstormProjects/proyecto-fp/src/reportWebVitals.js":"2","/Users/Carlos/WebstormProjects/proyecto-fp/src/App.js":"3","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/HomePage.js":"4","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/AboutPage.js":"5","/Users/Carlos/WebstormProjects/proyecto-fp/src/NavBar.js":"6","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPage.js":"7","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/ArticlesList.js":"8","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/NotFoundPage.js":"9","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/CommentsList.js":"10","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/SeccionVotos.js":"11","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/AddComentarioForm.js":"12","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/PaginaArticulo.js":"13","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/RelatedArticlesListPage.js":"14","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/Login.js":"15","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/AdminPage.js":"16","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/Users.js":"17","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/UsersList.js":"18","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPageAdmin.js":"19","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/ArticlesListAdmin.js":"20","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/NuevoPost.js":"21"},{"size":523,"mtime":1607393448544,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1607364704796,"results":"24","hashOfConfig":"23"},{"size":4026,"mtime":1611438723032,"results":"25","hashOfConfig":"23"},{"size":449,"mtime":1607366095231,"results":"26","hashOfConfig":"23"},{"size":189,"mtime":1607522872432,"results":"27","hashOfConfig":"23"},{"size":1871,"mtime":1611438359979,"results":"28","hashOfConfig":"23"},{"size":2640,"mtime":1611433359708,"results":"29","hashOfConfig":"23"},{"size":2589,"mtime":1611433141117,"results":"30","hashOfConfig":"23"},{"size":362,"mtime":1611437236669,"results":"31","hashOfConfig":"23"},{"size":1505,"mtime":1611436001785,"results":"32","hashOfConfig":"23"},{"size":1203,"mtime":1611139840800,"results":"33","hashOfConfig":"23"},{"size":1644,"mtime":1611139840797,"results":"34","hashOfConfig":"23"},{"size":1696,"mtime":1611437426322,"results":"35","hashOfConfig":"23"},{"size":2714,"mtime":1611139840799,"results":"36","hashOfConfig":"23"},{"size":3059,"mtime":1611430525694,"results":"37","hashOfConfig":"23"},{"size":144,"mtime":1611430525695,"results":"38","hashOfConfig":"23"},{"size":2408,"mtime":1611430525694,"results":"39","hashOfConfig":"23"},{"size":3068,"mtime":1611415185099,"results":"40","hashOfConfig":"23"},{"size":2793,"mtime":1611433119081,"results":"41","hashOfConfig":"23"},{"size":1824,"mtime":1611436001782,"results":"42","hashOfConfig":"23"},{"size":2341,"mtime":1611439009709,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"xy3igk",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Carlos/WebstormProjects/proyecto-fp/src/index.js",[],["92","93"],"/Users/Carlos/WebstormProjects/proyecto-fp/src/reportWebVitals.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/App.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/HomePage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/AboutPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/NavBar.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/ArticlesList.js",["94","95"],"import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {FaTimes} from \"react-icons/all\";\n\n//Nos traemos como parámetro la lista de artículos que nos manda desde la página de article listPage.\nconst ArticlesList = ({articulos, tokenSesion}) => {\n\n    const [articulo, setArticulo] = useState([]);\n\n    const borrararticulo = async (articulo) => {\n        console.log(articulo)\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/borrarPost`, {\n                method: 'post',\n                body: JSON.stringify({\"nombre\": articulo}),\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }\n        );\n\n        if (result.status === 200) {\n            console.log(\"Usuario \" + articulo + \"borrado\");\n        }\n    }\n\n    if (tokenSesion) {\n        return (\n            <>\n                {articulos.map((articulo, key) => (\n                    <div className=\"comment col media py-3\" key={key}>\n                        <div className=\"mr-3\">\n                            <button className=\"pet-delete btn btn-sm btn-danger\"\n                                    onClick={() => borrararticulo(articulo.nombre)}>\n                                {/*Importamos de la libreria react icons iconos para mejorar el aspecto de la web. En este caso la X*/}\n                                <FaTimes/>\n                            </button>\n                        </div>\n                        <Link className={\"article-list-item\"} key={key} to={`/articulo/${articulo.nombre}`} >\n                            <h3>{articulo.titulo}</h3>\n                            <p>{articulo.texto.substring(0,150)}...</p>\n                        </Link>\n                    </div>\n\n                ))}\n            </>\n\n        );\n    } else {\n        return (\n            <>\n                {/*\n        //Hacemos un map del array de artículos para sacar su título. Y Después usamos el Rotuer de React para crear\n        los links que dirigan a cada artículo\n*/}\n                {articulos.map((articulo, key) => (\n                    <Link className={\"article-list-item\"} key={key} to={`/articulo/${articulo.nombre}`} >\n                        <h3>{articulo.titulo}</h3>\n                        <p>{articulo.texto.substring(0,150)}...</p>\n                    </Link>\n                ))}\n            </>\n        )\n    }\n\n};\nexport default ArticlesList;\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/NotFoundPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/CommentsList.js",["96","97"],"import React, {useEffect, useState} from 'react'\n\n//Función que recibe los comentarios como argumentos, nos recorremos con un map un array y acada posición del array la\n// pintamos con el nombre de usuario y el texto del comentario\nconst CommentsList = ({nombre}) => {\n\n        const [articulo, setArticulo] = useState({\"comentarios\": []});\n\n\n        useEffect(() => {\n                //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n                const fetchDataArticulo = async () => {\n                        //Nos traemos los datos llamando a la api y guardamos la respuesta\n                        const resultado  = await fetch(`/api/articulo/${nombre}`);\n                        //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n                        const cuerpoRespuesta = await resultado.json();\n                        setArticulo(cuerpoRespuesta);\n                }\n                //Llamamos a la función que hemos creado\n                fetchDataArticulo();\n        }, );\n\n        return (\n\n            <>\n                    {articulo.comentarios.map((comentario, key) => (\n                        <div className={\"comment\"} key={key}>\n                                <h4>{comentario.usuario}</h4>\n                                <p>{comentario.comentario}</p>\n                        </div>\n\n                    ))}\n            </>\n        );\n};\n\nexport default CommentsList;\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/SeccionVotos.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/AddComentarioForm.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/PaginaArticulo.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/RelatedArticlesListPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/Login.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/AdminPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/Users.js",["98"],"import React, {useState} from 'react';\nimport UsersList from \"./UsersList\";\nimport NotFoundPage from \"../pages/NotFoundPage\";\n\n\n\nconst Users = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const [usuarioExito, setUsuarioExito] = useState('');\n\n\n    //Función para añadir un comentario\n    const addUsuario = async () => {\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/nuevoUsuario`, {\n            method: 'post',\n            body: JSON.stringify({nombre: username, email: email, password: password}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        //El cuerpo es el resultado pasado a json.\n        const body = await result.json();\n        if (result.status === 200) {\n            //Se dejan en blanco nuevamente los campos del formulario y se saca mensaje de Exito\n            setUsuarioExito(\"Usuario dado de alta correctamente\");\n            setUsername('');\n            setPassword('');\n            setEmail('');\n        }\n\n    }\n    if (props.tokenSesion) {\n\n    return (\n        <>\n        <form id={\"add-comment-form\"}>\n            <h3>Añadir un usuarioo</h3>\n            <div><span className={\"success text-success\"}>{usuarioExito}</span></div>\n            <label htmlFor={\"nombre\"}>\n                Nombre:\n                <input id={\"nombre\"} type={\"text\"} value={username} required onChange={(event => setUsername(event.target.value))}/>\n            </label>\n            <label htmlFor={email}>\n                Email:\n                <input id={\"email\"} type={email} value={email} required\n                          onChange={(event => setEmail(event.target.value))}/>\n            </label>\n            <label htmlFor={password}>\n                Contraseña:\n                <input id={\"password\"} value={password} required\n                       onChange={(event => setPassword(event.target.value))}/>\n            </label>\n            <button onClick={() => addUsuario()}>Crear usuario</button>\n        </form>\n                <UsersList/>\n            </>\n    );\n    } else {\n        return <NotFoundPage/>\n    }\n\n}\n\nexport default Users;\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/UsersList.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPageAdmin.js",["99"],"import React, {useEffect, useState} from 'react';\nimport ArticlesList from \"../components/ArticlesList\";\nimport ArticlesListAdmin from \"../components/ArticlesListAdmin\";\nimport NotFoundPage from \"./NotFoundPage\";\n\n\n\nconst ArticlesListPageAdmin = (props) =>  {\n\n//Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n// SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n//Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [todosArticulos, setTodosArticulos] = useState([]);\n\n//Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n//Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n//Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n// en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n// dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n//Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result  = await fetch(`/api/obtenerArticulos`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setTodosArticulos(responseBody);\n\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, []);\n\n\n        return (\n            //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n            // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n            <>\n                <h1>Entradas del blog</h1>\n                {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro  */}\n                <ArticlesList articulos={todosArticulos} tokenSesion={props.tokenSesion}/>\n            </>\n        )\n\n};\n\n\nexport default ArticlesListPageAdmin;\n\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/ArticlesListAdmin.js",["100","101"],"import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {FaTimes} from \"react-icons/all\";\n\n//Nos traemos como parámetro la lista de artículos que nos manda desde la página de article listPage.\nconst ArticlesListAdmin = ({articulos}) =>  {\n\n    const [articulo, setArticulo] = useState([]);\n\n    const borrararticulo = async (articulo) => {\n        console.log(articulo)\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/borrarPost`, {\n                method: 'post',\n                body: JSON.stringify({\"nombre\": articulo}),\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }\n        );\n\n        if (result.status === 200) {\n            console.log(\"Usuario \" + articulo + \"borrado\");\n\n        }\n\n    }\n\n\n\nreturn (\n    <>\n        {articulos.map((articulo, key) => (\n            <div className=\"comment col media py-3\" key={key}>\n                <div className=\"mr-3\">\n                    <button className=\"pet-delete btn btn-sm btn-danger\"\n                            onClick={() => borrararticulo(articulo.nombre)}>\n                        {/*Importamos de la libreria react icons iconos para mejorar el aspecto de la web. En este caso la X*/}\n                        <FaTimes/>\n                    </button>\n                </div>\n                <Link className={\"article-list-item\"} key={key} to={`/articulo/${articulo.nombre}`} >\n                    <h3>{articulo.titulo}</h3>\n                    <p>{articulo.texto.substring(0,150)}...</p>\n                </Link>\n            </div>\n\n        ))}\n    </>);\n\n    }\nexport default ArticlesListAdmin;\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/NuevoPost.js",["102","103"],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":8,"column":12,"nodeType":"110","messageId":"111","endLine":8,"endColumn":20},{"ruleId":"108","severity":1,"message":"112","line":8,"column":22,"nodeType":"110","messageId":"111","endLine":8,"endColumn":33},{"ruleId":"108","severity":1,"message":"113","line":2,"column":9,"nodeType":"110","messageId":"111","endLine":2,"endColumn":16},{"ruleId":"108","severity":1,"message":"114","line":24,"column":15,"nodeType":"110","messageId":"111","endLine":24,"endColumn":31},{"ruleId":"108","severity":1,"message":"115","line":27,"column":15,"nodeType":"110","messageId":"111","endLine":27,"endColumn":19},{"ruleId":"108","severity":1,"message":"116","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":20},{"ruleId":"108","severity":1,"message":"109","line":8,"column":12,"nodeType":"110","messageId":"111","endLine":8,"endColumn":20},{"ruleId":"108","severity":1,"message":"112","line":8,"column":22,"nodeType":"110","messageId":"111","endLine":8,"endColumn":33},{"ruleId":"108","severity":1,"message":"117","line":10,"column":26,"nodeType":"110","messageId":"111","endLine":10,"endColumn":41},{"ruleId":"108","severity":1,"message":"115","line":31,"column":15,"nodeType":"110","messageId":"111","endLine":31,"endColumn":19},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'articulo' is assigned a value but never used.","Identifier","unusedVar","'setArticulo' is assigned a value but never used.","'FaTimes' is defined but never used.","'borrarComentario' is assigned a value but never used.","'body' is assigned a value but never used.","'ArticlesList' is defined but never used.","'setnombrePostBD' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]