[{"/Users/Carlos/WebstormProjects/proyecto-fp/src/index.js":"1","/Users/Carlos/WebstormProjects/proyecto-fp/src/reportWebVitals.js":"2","/Users/Carlos/WebstormProjects/proyecto-fp/src/App.js":"3","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/HomePage.js":"4","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/AboutPage.js":"5","/Users/Carlos/WebstormProjects/proyecto-fp/src/NavBar.js":"6","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPage.js":"7","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/ArticlesList.js":"8","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/NotFoundPage.js":"9","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/CommentsList.js":"10","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/SeccionVotos.js":"11","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/AddComentarioForm.js":"12","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/PaginaArticulo.js":"13","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/RelatedArticlesListPage.js":"14","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/Login.js":"15","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/AdminPage.js":"16","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/Users.js":"17","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/UsersList.js":"18","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/NuevoPost.js":"19","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPageAdmin.js":"20","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/ArticlesListAdmin.js":"21","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPageReducido.js":"22"},{"size":604,"mtime":1611572922505,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1607364704796,"results":"25","hashOfConfig":"24"},{"size":4086,"mtime":1611548766136,"results":"26","hashOfConfig":"24"},{"size":1027,"mtime":1611548766145,"results":"27","hashOfConfig":"24"},{"size":189,"mtime":1607522872432,"results":"28","hashOfConfig":"24"},{"size":2724,"mtime":1611548766136,"results":"29","hashOfConfig":"24"},{"size":2902,"mtime":1611548766144,"results":"30","hashOfConfig":"24"},{"size":2762,"mtime":1611572263235,"results":"31","hashOfConfig":"24"},{"size":362,"mtime":1611489964447,"results":"32","hashOfConfig":"24"},{"size":1724,"mtime":1611548766138,"results":"33","hashOfConfig":"24"},{"size":1244,"mtime":1611548766139,"results":"34","hashOfConfig":"24"},{"size":2593,"mtime":1611548766137,"results":"35","hashOfConfig":"24"},{"size":3129,"mtime":1611548766146,"results":"36","hashOfConfig":"24"},{"size":2675,"mtime":1611548766139,"results":"37","hashOfConfig":"24"},{"size":3640,"mtime":1611548766138,"results":"38","hashOfConfig":"24"},{"size":144,"mtime":1611489964426,"results":"39","hashOfConfig":"24"},{"size":3091,"mtime":1611548766140,"results":"40","hashOfConfig":"24"},{"size":3358,"mtime":1611548766141,"results":"41","hashOfConfig":"24"},{"size":2755,"mtime":1611549464729,"results":"42","hashOfConfig":"24"},{"size":2793,"mtime":1611518528042,"results":"43","hashOfConfig":"24"},{"size":1824,"mtime":1611518530625,"results":"44","hashOfConfig":"24"},{"size":2918,"mtime":1611548766144,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xy3igk",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/Carlos/WebstormProjects/proyecto-fp/src/index.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/reportWebVitals.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/App.js",[],["96","97"],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/HomePage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/AboutPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/NavBar.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/ArticlesList.js",["98"],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/NotFoundPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/CommentsList.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/SeccionVotos.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/AddComentarioForm.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/PaginaArticulo.js",["99","100"],"import React, {useEffect, useState} from 'react';\nimport NotFoundPage from \"./NotFoundPage\";\nimport SeccionVotos from \"../components/SeccionVotos\";\nimport RelatedArticlesListPage from \"../components/RelatedArticlesListPage\";\nimport CommentsList from \"../components/CommentsList\";\nimport AddComentarioForm from \"../components/AddComentarioForm\";\nimport Moment from \"react-moment\";\nimport {FaComments} from \"react-icons/all\";\n\nconst PaginaArticulo = ({match}) => {\n    const nombre = match.params.nombre;\n\n    const [articulo, setArticulo] = useState({ });\n    const[error, setError] = useState(null);\n    const[mostrarForm, setMostrarForm] = useState(false);\n    let numComentarios = 0;\n\n    const interruptorForm = () => {\n        setMostrarForm(!mostrarForm);\n    }\n\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchDataArticulo = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const resultado  = await fetch(`/api/articulo/${nombre}`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const cuerpoRespuesta = await resultado.json();\n            setArticulo(cuerpoRespuesta);\n\n        }\n        //Llamamos a la función que hemos creado\n\n\n        fetchDataArticulo();\n\n\n    }, [nombre]);\n\n    if (articulo === null) return <NotFoundPage/>;\n    if (articulo.comentarios) numComentarios = articulo.comentarios.length;\n\n    return(\n\n            <div className={\"container\"}>\n                <div>\n                <h1>{articulo.titulo}</h1>\n                    <div className=\"row mb-0\">\n                        <div className=\" col-4 mb-0\">\n                            <p>Autor: {articulo.autor} </p>\n                            <p>Fecha creación: <Moment\n                                date={new Date(articulo.fechaCreacion)}\n                                parse={\"YYYY-MM-DD hh:mm\"}\n                                format={\"YYYY MMM-D h:mm a\"}/>\n                            </p>\n                            </div>\n                        <div className=\"col-4 offset-4 mb-0\">\n                            <SeccionVotos nombreArticulo={nombre} votos={articulo.votos} setInfoArticulo={setArticulo}/>\n                        </div>\n                    </div>\n                    <hr/>\n                </div>\n                <div className=\"mb-3\">{articulo.texto}</div>\n                <div className=\"row\">\n                    <div className=\"col-6 text-left text-dark\"><FaComments/> {numComentarios} Comentario(s) en este post. Únete a la conversación</div>\n                </div>\n                 <CommentsList nombre={nombre}/>\n                 <hr/>\n            <AddComentarioForm nombreArticulo={nombre} setInfoArticulo={setArticulo} mostrarForm={mostrarForm} interruptorForm={interruptorForm} />\n\n            <hr/>\n                <h4>Artículos relacionados</h4>\n                <RelatedArticlesListPage nombre={nombre}/>\n            </div>\n\n    );\n}\n\nexport default PaginaArticulo;\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/RelatedArticlesListPage.js",[],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/Login.js",["101","102"],"import React, {useState} from 'react';\nimport ArticlesListPage from \"../pages/ArticlesListPage\";\n\n\n//Recogemos en propiedades la función setToken\nconst Login = (props) => {\n\n\n    //Guardamos en los estados el email y la contraseña junto con el token que vamos a utilizar para comprobar la sesión\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    //Guardamos el token de sesión en la memoria\n    const [tokenSesion, setTokenSesion] = useState();\n    const [mensajeError, setMensajeError] = useState(\"\");\n\n\n    const getToken = () => {\n        if (sessionStorage.getItem('token')) {\n            const tokenString = sessionStorage.getItem('token');\n            setTokenSesion(tokenString);\n        }\n    };\n\n\n    //Si hay token, entendemos que se ha iniciado sesión sin cerrar y por tanto puede ir a la página de administración sin problema\n    if (tokenSesion) return <ArticlesListPage tokenSesion={tokenSesion}/>\n    getToken();\n\n\n    //Nos traemos el cuerpo de la respuesta, que es el nombre del usuario y lo ponemos como valor del token que dirá si tenemos la sesión abierta o no\n    const setToken = (cuerpoRespuesta) => {\n        setTokenSesion(cuerpoRespuesta);\n        sessionStorage.setItem('token', cuerpoRespuesta);\n\n    }\n\n\n    //Función para añadir un comentario\n    const login = async e => {\n        e.preventDefault();\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/login`, {\n                method: 'post',\n                body: JSON.stringify({email: email, password: password}),\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }\n        );\n        const cuerpoRespuesta = await result.json();\n\n        //Si el login es correcto que recibimos un status 200 ponemos el token y lo pasamos a la app por propiedades para\n        // que modifique la barra de navegación\n        if (result.status === 200) {\n            console.log(\"Token:\" + cuerpoRespuesta);\n            setToken(cuerpoRespuesta);\n            props.setTokenSesion();\n        } else {\n            setMensajeError(\"Usuario o contraseña introducidos incorrectos\")\n        }\n\n    };\n\n    return (\n        <div className={\"container\"}>\n        <form className={\"form-group\"} role={\"form\"} onSubmit={login}>\n            <h3>Inicio de sesión</h3>\n            <hr/>\n            <div className={\"form-group\"}>\n                <p className={\"danger text-danger\"}>{mensajeError}</p>\n                <label className={\"form-control-label\"} htmlFor={\"email\"}>\n                    Email:\n                </label>\n                    <input type={\"email\"} id={\"email\"}  className={\"form-control\"} name={\"email\"} placeholder={\"Introducir email\"}\n                           required value={email} onChange={(event => setEmail(event.target.value))}/>\n\n                <label className=\"form-control-label\" htmlFor={\"password\"}>\n                    Contraseña:\n                </label>\n                    <input type={\"text\"} id={\"password\"} className={\"form-control\"} name={\"password\"} value={password}\n                           type={\"password\"}\n                           placeholder={\"Introducir contraseña\"} required\n                           onChange={(event => setPassword(event.target.value))}/>\n            </div>\n            <input type={\"submit\"} className=\"btn btn-secondary\" value={\"Iniciar sesión\"}/>\n        </form>\n        </div>\n);\n}\nexport default Login;\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/AdminPage.js",[],["103","104"],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/Users.js",["105","106"],"import React, {useState} from 'react';\nimport UsersList from \"./UsersList\";\nimport NotFoundPage from \"../pages/NotFoundPage\";\nimport {FiUserPlus} from \"react-icons/all\";\n\n\n\nconst Users = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const [usuarioExito, setUsuarioExito] = useState('');\n\n\n    //Función para añadir un comentario\n    const addUsuario = async (e) => {\n        e.preventDefault();\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/nuevoUsuario`, {\n            method: 'post',\n            body: JSON.stringify({nombre: username, email: email, password: password}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        //El cuerpo es el resultado pasado a json.\n        const body = await result.json();\n        if (result.status === 200) {\n            //Se dejan en blanco nuevamente los campos del formulario y se saca mensaje de Exito\n            setUsuarioExito(\"Usuario dado de alta correctamente\");\n            setUsername('');\n            setPassword('');\n            setEmail('');\n        }\n\n    }\n    if (props.tokenSesion) {\n\n    return (\n\n        <div className={\"container\"}>\n            <form className={\"form-group\"} role={\"form\"}>\n                <h3>Creación de usuarios</h3>\n                <hr/>\n                <div className={\"form-group\"}>\n                    <p className={\"success text-success\"}>{usuarioExito}</p>\n                    <label className={\"form-control-label\"} htmlFor={\"nombre\"}>\n                        Nombre:\n\n                    <input id={\"nombre\"} className={\"form-control\"} type={\"text\"} value={username} required onChange={(event => setUsername(event.target.value))}/>\n                    </label>\n                    <label className={\"form-control-label\"} htmlFor={\"email\"}>\n                        Email:\n\n                    <input type={\"email\"} id={\"email\"}\n                              className={\"form-control\"}\n                              value={email}\n                              required\n                            onChange={(event => setEmail(event.target.value))}/>\n                    </label>\n                <label className={\"form-control-label\"} htmlFor={\"password\"}>\n                    Contraseña:\n\n                <input id={\"password\"} className={\"form-control\"} type={\"password\"} value={password} required onChange={(event => setPassword(event.target.value))}/>\n                </label>\n                </div>\n                <div className={\"btn btn-secondary\"} onClick={addUsuario}><FiUserPlus/> Añadir Usuario</div>\n            </form>\n\n            <hr/>\n            <h3>Lista de usuarios</h3>\n            <UsersList setUsuarioExito={setUsuarioExito}/>\n        </div>\n\n    );\n    } else {\n        return <NotFoundPage/>\n    }\n\n}\n\nexport default Users;\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/UsersList.js",["107"],"import React, {useEffect, useState} from 'react'\nimport {BiUserX, FaTimes} from \"react-icons/all\";\n\n//Función que recibe los comentarios como argumentos, nos recorremos con un map un array y acada posición del array la\n// pintamos con el nombre de usuario y el texto del comentario\nconst UsersList = (props) => {\n\n        const [usuarios, setUsuarios] = useState([]);\n\n\n\n        const borrarUsuario = async (emailUsuario) => {\n                console.log(emailUsuario)\n                        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n                        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n                        const result = await fetch(`/api/borrarUsuario`, {\n                                    method: 'post',\n                                    body: JSON.stringify({\"email\": emailUsuario}),\n                                    headers: {\n                                            'Content-Type': 'application/json',\n                                    }\n                            }\n                        );\n\n                        if (result.status === 200) {\n                                console.log(\"Usuario \" + emailUsuario + \"borrado\");\n                                props.setUsuarioExito(\"Usuario borrado correctamente\")\n\n                        }\n\n        }\n\n\n        useEffect(() => {\n                //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n                const fetchDataUsers = async () => {\n                        //Nos traemos los datos llamando a la api y guardamos la respuesta\n                        const resultado  = await fetch(`/api/obtenenerTodosUsuarios`);\n                        //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n                        const cuerpoRespuesta = await resultado.json();\n                        console.log(cuerpoRespuesta)\n                        setUsuarios(cuerpoRespuesta);\n                }\n                //Llamamos a la función que hemos creado\n                fetchDataUsers();\n        }, );\n\n        return (\n\n            <>\n                <div className={\"container\"}>\n                    <div className={\"align-content-center\"}>\n                    {usuarios.map((usuario, key) => (\n                        <div className=\"col media py-3\" key={key}>\n                                <div className=\"mr-3\">\n                                        <button className=\"btn btn-sm btn-danger\" aria-label={\"Borrar Usuario\"}\n                                                onClick={() => borrarUsuario(usuario.email)}>\n                                                {/*Importamos de la libreria react icons iconos para mejorar el aspecto de la web. En este caso la X*/}\n                                                <BiUserX/>\n                                        </button>\n\n                                </div>\n                            <div>\n                            <h4>{usuario.nombreUsuario}</h4>\n                                <p>{usuario.email}</p>\n                            </div>\n                        </div>\n\n                    ))}\n                    </div>\n                </div>\n            </>\n        );\n};\n\nexport default UsersList;\n","/Users/Carlos/WebstormProjects/proyecto-fp/src/components/NuevoPost.js",["108","109"],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPageAdmin.js",["110","111"],"/Users/Carlos/WebstormProjects/proyecto-fp/src/components/ArticlesListAdmin.js",["112","113"],"/Users/Carlos/WebstormProjects/proyecto-fp/src/pages/ArticlesListPageReducido.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":8,"column":22,"nodeType":"120","messageId":"121","endLine":8,"endColumn":33},{"ruleId":"118","severity":1,"message":"122","line":14,"column":11,"nodeType":"120","messageId":"121","endLine":14,"endColumn":16},{"ruleId":"118","severity":1,"message":"123","line":14,"column":18,"nodeType":"120","messageId":"121","endLine":14,"endColumn":26},{"ruleId":"124","severity":1,"message":"125","line":67,"column":9,"nodeType":"126","endLine":67,"endColumn":71},{"ruleId":"127","severity":1,"message":"128","line":82,"column":28,"nodeType":"129","endLine":82,"endColumn":45},{"ruleId":"114","replacedBy":"130"},{"ruleId":"116","replacedBy":"131"},{"ruleId":"118","severity":1,"message":"132","line":29,"column":15,"nodeType":"120","messageId":"121","endLine":29,"endColumn":19},{"ruleId":"124","severity":1,"message":"125","line":44,"column":13,"nodeType":"126","endLine":44,"endColumn":58},{"ruleId":"118","severity":1,"message":"133","line":2,"column":18,"nodeType":"120","messageId":"121","endLine":2,"endColumn":25},{"ruleId":"118","severity":1,"message":"132","line":35,"column":15,"nodeType":"120","messageId":"121","endLine":35,"endColumn":19},{"ruleId":"124","severity":1,"message":"125","line":50,"column":9,"nodeType":"126","endLine":50,"endColumn":73},{"ruleId":"118","severity":1,"message":"134","line":3,"column":8,"nodeType":"120","messageId":"121","endLine":3,"endColumn":25},{"ruleId":"118","severity":1,"message":"135","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":20},{"ruleId":"118","severity":1,"message":"136","line":8,"column":12,"nodeType":"120","messageId":"121","endLine":8,"endColumn":20},{"ruleId":"118","severity":1,"message":"119","line":8,"column":22,"nodeType":"120","messageId":"121","endLine":8,"endColumn":33},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'setArticulo' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","jsx-a11y/no-redundant-roles","The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["137"],["138"],"'body' is assigned a value but never used.","'FaTimes' is defined but never used.","'ArticlesListAdmin' is defined but never used.","'NotFoundPage' is defined but never used.","'articulo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]